let e,n;await window.interpretate.shared.Marked.load(),e=window.interpretate.shared.Marked.default,await window.interpretate.shared.katex.load(),n=window.interpretate.shared.katex.default;const t={transaction:(e,n,t,o)=>{if(console.log(n.dom.ocellref),n.dom.ocellref){const e=n.dom.ocellref.origin.channel;server._emitt(e,`<|"Channel"->"${t}", "Length"->${o}, "CellType"->"md"|>`,'Forwarded["CM:PasteEvent"]')}},file:(e,n,t,o,r)=>{console.log(n.dom.ocellref),n.dom.ocellref&&server.emitt(t,`<|"Data"->"${r}", "Name"->"${o}"|>`,"File")}},o={transaction:(e,n,t,o)=>{if(console.log(n.dom.ocellref),n.dom.ocellref){const e=n.dom.ocellref.origin.channel;server._emitt(e,`<|"Channel"->"${t}", "Length"->${o}, "CellType"->"md"|>`,'Forwarded["CM:DropEvent"]')}},file:(e,n,t,o,r)=>{console.log(n.dom.ocellref),n.dom.ocellref&&server.emitt(t,`<|"Data"->"${r}", "Name"->"${o}"|>`,"File")}};function r(e){return{name:"frontendObject",level:"inline",start:e=>e.indexOf("FrontEndExecutable["),tokenizer(e,n){const t=e.match(/^FrontEndExecutable\[+([^\[\n]+?)\]+/);if(t)return{type:"frontendObject",raw:t[0],text:t[1].trim()}},renderer(n,t){console.warn("frontendObject");const o={uid:n.text,elementId:"femarkdown-"+uuidv4()};return e.buffer.push(o),console.warn(this),`<div class="markdown-feobject" id="${o.elementId}"></div>`}}}const a={throwOnError:!1};window.SupportedLanguages.push({check:e=>null!=e[0].match(/\w*\.(md)$/),plugins:[window.markdown(),window.DropPasteHandlers(o,t)],name:window.markdownLanguage.name}),window.SupportedCells.markdown={view:class{origin={};feObjects=[];envs=[];dispose(){console.warn("Markdown cell dispose...");for(const e of this.envs)for(const n of Object.values(e.global.stack))console.log("dispose"),n.dispose()}constructor(t,o){console.log("marked data:::"),console.log(o);const l=this;var i,c;return new e({async:!0,extensions:[(i=a,{name:"inlineKatex",level:"inline",start:e=>e.indexOf("$"),tokenizer(e,n){const t=e.match(/^\$+([^$\n]+?)\$+/);if(t)return{type:"inlineKatex",raw:t[0],text:t[1].trim()}},renderer:e=>(console.warn("inlineKatex"),n.renderToString(e.text.replaceAll("\\\\","\\"),i))}),{name:"mark",level:"inline",start:e=>e.indexOf("$"),tokenizer(e,n){const t=e.match(/^==+([^=\n]+?)==+/);if(t)return{type:"mark",raw:t[0],text:t[1].trim()}},renderer:e=>(console.warn("mark"),"<mark>"+e.text+"</mark>")},{name:"blockKatex",level:"block",start:e=>e.indexOf("\n$$"),tokenizer(e,n){const t=e.match(/^\$\$\n([^$]+?)\n\$\$/);if(t)return{type:"blockKatex",raw:t[0],text:t[1].trim()}},renderer:e=>(console.warn("blockKatex"),`<p style="padding-top: 1em; padding-bottom: 1em;">${n.renderToString(e.text.replaceAll("\\\\","\\"),{displayMode:!0})}</p>`)},r({buffer:l.feObjects})]}).parse((c=o,c.replace(/\\:[\da-f]{4}/gi,(function(e){return String.fromCharCode(parseInt(e.replace(/\\:/g,""),16))})))).then((e=>{t.element.innerHTML=e,l.feObjects.forEach((async e=>{var n={call:Date.now()+Math.floor(10009*Math.random())};console.warn("loading executable on a markdown field..."),console.log(e.uid);let t,o={global:n,element:document.getElementById(e.elementId)};console.log("Marked: creating an object"),console.log("forntend executable"),console.log("check cache"),t=ObjectHashMap[e.uid]?ObjectHashMap[e.uid]:new ObjectStorage(e.uid),console.log(t);const r=o,a=await t.get(),i=new ExecutableObject("marked-stored-"+uuidv4(),r,a);i.assignScope(r),t.assign(i),i.execute(),l.envs.push(o)}))})),t.element.classList.add("markdown","margin-bottom-fix"),this}}};
